{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to BrainSight","text":""},{"location":"#what-is-it","title":"What is it?","text":"<p>BrainSight is a python-based toolkit that simplifies the analysis of KELVIN-created multimodal datasets containing kinematic and brain-sensing data captured during a motor assessment.</p> <p>These modalities include, among others:</p> <ul> <li>Local field potential (LFP) signals,</li> <li>Pose estimation data,</li> <li>Automatically detected activity regions.</li> </ul> <p>Full description of the dataset creation can be found here.</p>"},{"location":"#try-it-out","title":"Try it out","text":"<p>Find out how to <code>install</code> this cool package.</p> <p>Then learn how to use it by checking out the <code>demo</code> notebook.</p> <p>For more details see the <code>docs</code></p>"},{"location":"#who-do-i-talk-to","title":"Who do I talk to?","text":"<p>For news and issues check out our <code>GitHub</code> page!</p> <p>If you have any questions about the package, reach out to us at:</p> <p>MMT Analytics | analytics@machinemedicine.com</p>"},{"location":"dataset/","title":"Multimodal Dataset Creation","text":"<p>The true potential of BrainSight is realized when analyzing data within multimodal datasets created exclusively by the KELVIN platform.</p> <p>Users who capture MDS-UPDRS Part III assessments using the Kelvin Clinic application can attach to them the JSON session report exported from Medtronic's Percept PC/RC neurostimulator and benefit from the automatic processing and synchronization of LFP signals with rich kinematic video data.</p> <p>Dataset creation begins when the Percept report is uploaded by the user. Once processed, it is available for download in JSON format. This file can then be easily read and explored using the Dataset class.</p>"},{"location":"dataset/#modalities","title":"Modalities","text":"<p>Here is a list of all modalities contained within the dataset:</p> Modality Description LFP Local field potential signals extracted from the Percept JSON session report POSE X- and Y-coordinate signals for 75 automatically detected body key-points ACTIVITY Regions of assessment-specific activities recognized within the videos MDS_UPDRS List of user-provided MDS-UPDRS Part III ratings ACCELEROMETER Acceleration signal recorded by the assessment-capture device ASSESSMENT_INFO Reference, date, and user email attached to the KELVIN assessment VIDEO_METADATA Metadata extracted from the assessment items' video files <p>When successfully processed, all modalities ought to be synchronised in time, enabling the simultaneous analysis of the brain and motor activity! Find out how to perform simple analysis by viewing our Tutorials pages.</p>"},{"location":"demo/","title":"Getting Started","text":"<p>To demonstrate the functionality of BrainSight we have prepared a sample notebook that introduces all of the basic concepts and modules.</p> <p>Feel free to have a go at <code>Colab</code></p>"},{"location":"install/","title":"Install via <code>pip</code>","text":"<p>BrainSight can be installed like many other python packages by simply running:</p> <pre><code>$ pip install brainsight\n</code></pre> <p>And that's it! BrainSight should be ready for use.</p> <p>NOTE: BrainSight requires <code>python=3.10</code> or higher</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>brainsight<ul> <li>modules<ul> <li>base_module</li> <li>defaults</li> <li>lfp</li> <li>periodogram</li> <li>spectrogram</li> <li>utils</li> </ul> </li> <li>types<ul> <li>dataset</li> <li>signal</li> <li>utils</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/brainsight/__init__/","title":"brainsight","text":"<p>BrainSight accommodates easy and intuitive analysis of local field potential (LFP) data captured by the Percept PC device and saved as part of a multimodal data exported through the KELVIN platform.</p> <p><code>brainsight.types</code> contain classes designed to simplify the handling of multimodal datasets and timestamp-synchronised signals.</p> <p><code>brainsight.modules</code> allow for processing and plotting of the data using the custom typing, ensuring that the analysis is straightforward and robust.</p> <p>The most common <code>modules</code> and <code>types</code> can be directly accessed from <code>brainsight</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import brainsight as brain\n&gt;&gt;&gt; dataset = brain.Dataset(\"path/to/dataset_file.json\")\n&gt;&gt;&gt; dataset\nDataset: \n- ACTIVITY\n- MDS_UPDRS\n- ACCELEROMETER\n- LFP\n- POSE\n- ASSESSMENT_INFO\n- VIDEO_METADATA\nAdditional LFP shift: 0[ms]\n</code></pre>"},{"location":"reference/brainsight/modules/__init__/","title":"modules","text":"<p>Modules for analysis and plotting of the multimodal Dataset</p> <p>Currently available modules include:</p> <ul> <li><code>LFP</code></li> <li><code>Periodogram</code> </li> <li><code>Spectrogram</code></li> </ul>"},{"location":"reference/brainsight/modules/base_module/","title":"base_module","text":""},{"location":"reference/brainsight/modules/base_module/#brainsight.modules.base_module.BaseModule","title":"<code>BaseModule(dataset: Dataset, **kwargs)</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for modules interacting with <code>Dataset</code> instances.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>Dataset instance containing the LFP signals and other data modalities.</p> required"},{"location":"reference/brainsight/modules/base_module/#brainsight.modules.base_module.BaseModule.get_data","title":"<code>get_data(channel: str, roi: Optional[Union[Tuple[int, int], Tuple[str, str], str]], **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Abstract method for the extraction of plotting data. Its interface needs to be implemented by the child class.</p>"},{"location":"reference/brainsight/modules/base_module/#brainsight.modules.base_module.BaseModule.plot","title":"<code>plot(roi: Optional[Union[Tuple[int, int], Tuple[str, str], str]] = None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Abstract method for plotting. Its interface needs to be implemented by the child class.</p>"},{"location":"reference/brainsight/modules/defaults/","title":"defaults","text":"<p>Contains some default parameters for the plotting modules.</p>"},{"location":"reference/brainsight/modules/lfp/","title":"lfp","text":""},{"location":"reference/brainsight/modules/lfp/#brainsight.modules.lfp.LFP","title":"<code>LFP(dataset: Dataset, low_freq: Optional[float] = None, high_freq: Optional[float] = None, filter_kwargs: Optional[dict] = None, **kwargs)</code>","text":"<p>             Bases: <code>BaseModule</code></p> <p>LFP module allows for filtering and plotting of the LFP signals</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>Dataset instance containing the LFP signals and other data modalities.</p> required <code>low_freq</code> <code>float or None</code> <p>The lower pass-band edge, by default None</p> <code>None</code> <code>high_freq</code> <code>float or None</code> <p>The upper pass-band edge, by default None</p> <code>None</code> <code>filter_kwargs</code> <code>dict or None</code> <p>Additional parameters passed to the <code>mne.filter.filter_data</code> function, by default <code>None</code></p> <code>None</code> Notes <p>The filtering applied depends on the provided <code>low_freq</code> and <code>high_freq</code> according to the documentation of <code>mne.filter.filter_data</code>:</p> <p>Applies a zero-phase low-pass, high-pass, band-pass, or band-stop filter to the channels selected by picks. low_freq and high_freq are the frequencies below which and above which, respectively, to filter out of the data. Thus the uses are:     * <code>low_freq &lt; high_freq</code>: band-pass filter     * <code>low_freq &gt; high_freq</code>: band-stop filter     * <code>low_freq is not None and high_freq is None</code>: high-pass filter     * <code>low_freq is None and high_freq is not None</code>: low-pass filter</p> <p>For more details, see: MNE - filter_data</p> <p>Methods:</p> Name Description <code>get_data</code> <p>Filter the signal of the selected LFP channel within the specified ROI.</p> <code>plot</code> <p>Plot the LFP signals for all channels within the dataset.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Additional parameters passed to the the parent <code>BaseModule</code> class.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset(\"path/to/dataset_file.json\")\n&gt;&gt;&gt; lfp = LFP(dataset)\n&gt;&gt;&gt; lfp.plot()\n</code></pre>"},{"location":"reference/brainsight/modules/lfp/#brainsight.modules.lfp.LFP.get_data","title":"<code>get_data(channel: str, roi: Optional[Union[Tuple[int, int], Tuple[str, str], str]], **kwargs) -&gt; np.ndarray</code>","text":"<p>Filter (if either low_freq or high_freq is specified) the LFP signal of the selected channel and cut it to the given ROI.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>str</code> <p>Channel of the LFP for which to process the signal.</p> required <code>roi</code> <code>Tuple[int, int] or Tuple[str, str], or str, or None</code> <p>Region of interest for which to process the LFP signal. Can be specified as: - <code>Tuple[int, int]</code>; a tuple of timestamps [miliseconds], - <code>Tuple[str, str]</code>; a tuple of time strings in the \"HH:MM:SS\" format, - <code>str</code>; name of the detected activity class, - <code>None</code>; the entire signal ROI is used.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Additional parameters passed to the <code>mne.filter.filter_data</code> function.</p> <p>Returns:</p> Type Description <code>ndarray</code> <p>Values of the (filtered) LFP signal for the selected channel.</p>"},{"location":"reference/brainsight/modules/lfp/#brainsight.modules.lfp.LFP.plot","title":"<code>plot(roi: Optional[Union[Tuple[int, int], Tuple[str, str], str]] = None, show_activity: bool = True, show_accelerometer: bool = False, **kwargs) -&gt; plt.Figure</code>","text":"<p>Plot the (filtered) LFP signals for all channels within the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>roi</code> <code>Tuple[int, int] or Tuple[str, str], or str, or None</code> <p>Region of interest for which to plot the LFP signals. Can be specified as: - <code>Tuple[int, int]</code>; a tuple of timestamps [miliseconds], - <code>Tuple[str, str]</code>; a tuple of time strings in the \"HH:MM:SS\" format, - <code>str</code>; name of the detected activity class, - <code>None</code>; the entire signal ROI is used.</p> <code>None</code> <code>show_activity</code> <code>bool</code> <p>Whether to show activity regions found within the selected ROI, by default True.</p> <code>True</code> <code>show_accelerometer</code> <code>bool</code> <p>Whether to show the accelerometer signal, by default False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Figure</code> <p>LFP signal figure.</p>"},{"location":"reference/brainsight/modules/periodogram/","title":"periodogram","text":""},{"location":"reference/brainsight/modules/periodogram/#brainsight.modules.periodogram.Periodogram","title":"<code>Periodogram(dataset: Dataset, frequency_band: Optional[Tuple[float, float]] = None, bandwidth: Optional[float] = None, adaptive: bool = False, brainwave_bands: Dict[str, Tuple[float, float]] = defaults.BRAINWAVE_BANDS, psd_kwargs: Optional[dict] = None, **kwargs)</code>","text":"<p>             Bases: <code>BaseModule</code></p> <p>Periodogram module allows for calculation and plotting of multitapered periodograms of the LFP signals</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>Dataset instance containing the LFP signals and other data modalities.</p> required <code>frequency_band</code> <code>Tuple[float, float] or None</code> <p>Interval of frequencies for which to compute the PSD. If <code>None</code>, the band is set to (0, Nyquist), by default <code>None</code>.</p> <code>None</code> <code>bandwidth</code> <code>float or None</code> <p>Frequency bandwidth of the multi-taper window function in Hz. For a given frequency, frequencies at \u00b1 bandwidth / 2 are smoothed together. If <code>None</code>, the value is set to <code>8 * (signal.samplig_rate / len(signal))</code>, by default <code>None</code></p> <code>None</code> <code>adaptive</code> <code>bool</code> <p>Use adaptive weights to combine the tapered spectra into PSD (might be slower), by default False.</p> <code>False</code> <code>brainwave_bands</code> <code>Dict[str, Tuple[float, float]]</code> <p>Dictionary of LFP frequency bands used for plotting. The specified bands and their corresponding power are highlighted. By default the bands are set to: <code>{\"delta\": (0.0, 4.0), \"theta\": (4.0, 8.0), \"alpha\": (8.0, 13.0), \"beta\": (13.0, 32.0), \"gamma\": (32.0, 120.0)}</code></p> <code>BRAINWAVE_BANDS</code> <code>psd_kwargs</code> <code>dict or None</code> <p>Additional parameters passed to the <code>mne.time_frequency.psd_array_multitaper</code> function, by default <code>None</code></p> <code>None</code> Notes <p>The periodogram calculation is performed using the <code>mne.time_frequency.psd_array_multitaper</code> function. For more information about the algorithm visit: MNE - psd_array_multitaper</p> <p>Methods:</p> Name Description <code>get_data</code> <p>Compute a multitaper PSD for the selected LFP channel within the specified ROI.</p> <code>plot</code> <p>Plot the periodogram for all LFP channels within the dataset.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Additional parameters passed to the the parent <code>BaseModule</code> class.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset(\"path/to/dataset_file.json\")\n&gt;&gt;&gt; periodogram = Periodogram(dataset)\n&gt;&gt;&gt; periodogram.plot()\n</code></pre>"},{"location":"reference/brainsight/modules/periodogram/#brainsight.modules.periodogram.Periodogram.get_data","title":"<code>get_data(channel: str, roi: Optional[Union[Tuple[int, int], Tuple[str, str], str]], **kwargs)</code>","text":"<p>Compute a multitaper PSD for the selected LFP channel within the specified ROI.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>str</code> <p>Channel of the LFP for which to calculate the PSD.</p> required <code>roi</code> <code>Tuple[int, int] or Tuple[str, str], or str, or None</code> <p>Region of interest for which to calculate the PSD. Can be specified as: - <code>Tuple[int, int]</code>; a tuple of timestamps [miliseconds], - <code>Tuple[str, str]</code>; a tuple of time strings in the \"HH:MM:SS\" format, - <code>str</code>; name of the detected activity class, - <code>None</code>; the entire signal ROI is used.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Additional parameters passed to the the <code>mne.time_frequency.psd_array_multitaper</code> function.</p> <p>Returns:</p> Type Description <code>Tuple[ndarray, ndarray]</code> <p>Estimated power and corresponding frequencies arrays</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset(\"path/to/dataset_file.json\")\n&gt;&gt;&gt; dataset.LFP\nDataset:\n- ZERO_TWO_RIGHT\n- ZERO_TWO_LEFT\n&gt;&gt;&gt; dataset.ACTIVITY\nACTIVITY:\n- LEG_AGILITY_RIGHT\n- FINGER_TAPPING_LEFT\n- GAIT_TOWARDS_CAMERA\n- HAND_MOVEMENTS_RIGHT\n- ARISING_FROM_CHAIR\n- FINGER_TAPPING_RIGHT\n- GAIT_FROM_CAMERA\n- TOE_TAPPING_LEFT\n- TOE_TAPPING_RIGHT\n- POSTURAL_TREMOR_OF_HANDS_LEFT\n- LEG_AGILITY_LEFT\n- HAND_MOVEMENTS_LEFT\n&gt;&gt;&gt; periodogram = Periodogram(dataset, frequency_band=(5.0, 50.0))\n&gt;&gt;&gt; psds, freqs = periodogram.get_data(channel=\"ZERO_TWO_RIGHT\", roi=\"ARISING_FROM_CHAIR\")\n</code></pre>"},{"location":"reference/brainsight/modules/periodogram/#brainsight.modules.periodogram.Periodogram.plot","title":"<code>plot(roi: Optional[Union[Tuple[int, int], Tuple[str, str], str]] = None, norm: str = 'density', **kwargs) -&gt; plt.Figure</code>","text":"<p>Plot the periodogram for all LFP channels within the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>roi</code> <code>Tuple[int, int] or Tuple[str, str], or str, or None</code> <p>Region of interest for which to plot the PSD. Can be specified as: - <code>Tuple[int, int]</code>; a tuple of timestamps [miliseconds], - <code>Tuple[str, str]</code>; a tuple of time strings in the \"HH:MM:SS\" format, - <code>str</code>; name of the detected activity class, - <code>None</code>; the entire signal ROI is used.</p> <code>None</code> <code>norm</code> <code>(density, power, dB)</code> <p>Mode of the plotting norm. If <code>\"density\"</code>, the plot is normalised per channel so that the area sums up to 1.0. If <code>\"power\"</code>, the raw power is drawn. If <code>\"dB\"</code>, the power gets converted to dB, by default <code>\"desnity\"</code>.</p> <code>\"density\"</code> <p>Returns:</p> Type Description <code>Figure</code> <p>Periodogram figure.</p>"},{"location":"reference/brainsight/modules/spectrogram/","title":"spectrogram","text":""},{"location":"reference/brainsight/modules/spectrogram/#brainsight.modules.spectrogram.Spectrogram","title":"<code>Spectrogram(dataset: Dataset, window_sec: float = 10.0, frequency_step: float = 1.0, frequency_band: Optional[Tuple[float, float]] = None, tfr_kwargs: dict = None, **kwargs)</code>","text":"<p>             Bases: <code>BaseModule</code></p> <p>Spectrogram module allows for calculation and plotting of multitapered spectrograms of the LFP signals</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>Dataset instance containing the LFP signals and other data modalities.</p> required <code>window_sec</code> <code>float</code> <p>Sliding time window size [in seconds] with which to compute the spectrogram.</p> <code>10.0</code> <code>frequency_step</code> <code>float</code> <p>Parameter controlling the spectral resolution of the spectrogram. Specifies the step size between estimated frequencies, by default <code>1.0</code>.</p> <code>1.0</code> <code>frequency_band</code> <code>Tuple[float, float] or None</code> <p>Interval of frequencies for which to compute the Spectrogram. If <code>None</code>, the band is set to (<code>frequency_step</code>, Nyquist), by default <code>None</code>.</p> <code>None</code> <code>tfr_kwargs</code> <code>dict or None</code> <p>Additional parameters passed to the <code>mne.time_frequency.tfr_array_multitaper</code> function, by default <code>None</code></p> <code>None</code> Notes <p>The spectrogram calculation is performed using the <code>mne.time_frequency.tfr_array_multitaper</code> function. For more information about the algorithm visit: MNE - tfr_array_multitaper</p> <p>Methods:</p> Name Description <code>get_data</code> <p>Compute a multitaper spectrogram for the selected LFP channel within the specified ROI.</p> <code>plot</code> <p>Plot the spectrogram for all LFP channels within the dataset.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Additional parameters passed to the the parent <code>BaseModule</code> class.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset(\"path/to/dataset_file.json\")\n&gt;&gt;&gt; spectrogram = Spectrogram(dataset)\n&gt;&gt;&gt; spectrogram.plot()\n</code></pre>"},{"location":"reference/brainsight/modules/spectrogram/#brainsight.modules.spectrogram.Spectrogram.get_data","title":"<code>get_data(channel: str, roi: Optional[Union[Tuple[int, int], Tuple[str, str], str]], **kwargs) -&gt; Tuple[np.ndarray, np.ndarray]</code>","text":"<p>Compute a multitaper spectrogram for the selected LFP channel within the specified ROI.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>str</code> <p>Channel of the LFP for which to calculate the spectrogram.</p> required <code>roi</code> <code>Tuple[int, int] or Tuple[str, str], or str, or None</code> <p>Region of interest for which to calculate the spectrogram. Can be specified as: - <code>Tuple[int, int]</code>; a tuple of timestamps [miliseconds], - <code>Tuple[str, str]</code>; a tuple of time strings in the \"HH:MM:SS\" format, - <code>str</code>; name of the detected activity class, - <code>None</code>; the entire signal ROI is used.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Additional parameters passed to the the <code>mne.time_frequency.tpr_array_multitaper</code> function.</p> <p>Returns:</p> Type Description <code>Tuple[ndarray, ndarray]</code> <p>Estimated spectrogram and corresponding frequencies arrays</p>"},{"location":"reference/brainsight/modules/spectrogram/#brainsight.modules.spectrogram.Spectrogram.plot","title":"<code>plot(roi: Optional[Union[Tuple[int, int], Tuple[str, str], str]] = None, show_activity: bool = True, **kwargs) -&gt; plt.Figure</code>","text":"<p>Plot the spectrogram for all LFP channels within the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>roi</code> <code>Tuple[int, int] or Tuple[str, str], or str, or None</code> <p>Region of interest for which to plot the spectrogram. Can be specified as: - <code>Tuple[int, int]</code>; a tuple of timestamps [miliseconds], - <code>Tuple[str, str]</code>; a tuple of time strings in the \"HH:MM:SS\" format, - <code>str</code>; name of the detected activity class, - <code>None</code>; the entire signal ROI is used.</p> <code>None</code> <code>show_activity</code> <code>bool</code> <p>Whether to show activity regions found within the selected ROI, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Figure</code> <p>Spectrogram figure.</p>"},{"location":"reference/brainsight/modules/utils/","title":"utils","text":"<p>Contains utility functions for the plotting modules.</p>"},{"location":"reference/brainsight/modules/utils/#brainsight.modules.utils.ms_to_str","title":"<code>ms_to_str(ms: int) -&gt; str</code>","text":"<p>Convert miliseconds into a string timestamp.</p>"},{"location":"reference/brainsight/modules/utils/#brainsight.modules.utils.nanpow2db","title":"<code>nanpow2db(y: np.ndarray) -&gt; np.ndarray</code>","text":"<p>Convert Power array to dB.</p>"},{"location":"reference/brainsight/modules/utils/#brainsight.modules.utils.str_to_ms","title":"<code>str_to_ms(string: str) -&gt; int</code>","text":"<p>Convert a string timestamp into miliseconds.</p>"},{"location":"reference/brainsight/types/__init__/","title":"types","text":"<p>Data types used to easily navigate the multimodal dataset.</p> <p>Main data types include:</p> <ul> <li><code>Dataset</code></li> <li><code>Signal</code></li> </ul>"},{"location":"reference/brainsight/types/dataset/","title":"dataset","text":""},{"location":"reference/brainsight/types/dataset/#brainsight.types.dataset.Dataset","title":"<code>Dataset(file_or_dict: Union[str, dict], name: str = 'Dataset')</code>","text":"<p>             Bases: <code>_Dataset</code></p> <p>A class for convenient handling of the dataset obtained from the KELVIN platform. It unpacks and formats the json file, and integrates with <code>brainsight</code>'s plotting functionality. All levels of the dataset are easily accessible as attributes of the initialised Dataset instance.</p> <p>Parameters:</p> Name Type Description Default <code>file_or_dict</code> <code>Union[str, dict]</code> <p>File path to a json file of the dataset downloaded from KELVIN, or the already loaded dataset dictionary.</p> required <p>Attributes:</p> Name Type Description <code>lfp_shift</code> <code>int</code> <p>Additional time shift [in miliseconds] settable by the user to manually adjust the timestamps of the LFP signals.</p> <p>Other Parameters:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the dataset, by default \"Dataset\"</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset(\"path/to/dataset_file.json\")\n&gt;&gt;&gt; dataset\nDataset:\n- LFP\n- MDS_UPDRS\n- ACTIVITY\n- ACCELEROMETER\n- VIDEO_METADATA\n- ASSESSMENT_INFO\n- POSE\nAdditional LFP shift: 0[ms]\n&gt;&gt;&gt; dataset.LFP\nLFP:\n- ZERO_TWO_LEFT\n- ZERO_TWO_RIGHT\n&gt;&gt;&gt; dataset.LFP.ZERO_TWO_LEFT\nSignal(N: 113661, ROI: (0, 454600), SamplingRate: 250.0Hz)\n</code></pre>"},{"location":"reference/brainsight/types/dataset/#brainsight.types.dataset.Dataset.lfp_shift","title":"<code>lfp_shift: int</code>  <code>property</code> <code>writable</code>","text":"<p>Additional time shift of the LFP signals. Assign it an integer value [miliseconds] to shift all LFP Signals returned by the Dataset by that value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset(\"path/to/dataset_file.json\")\n&gt;&gt;&gt; dataset\nDataset:\n- LFP\n- MDS_UPDRS\n- ACTIVITY\n- ACCELEROMETER\n- VIDEO_METADATA\n- ASSESSMENT_INFO\n- POSE\nAdditional LFP shift: 0[ms]\n&gt;&gt;&gt; dataset.LFP.ZERO_TWO_LEFT\nSignal(N: 113661, ROI: (0, 454600), SamplingRate: 250.0Hz)\n&gt;&gt;&gt; dataset.lfp_shift = 800\n&gt;&gt;&gt; dataset\nDataset:\n- LFP\n- MDS_UPDRS\n- ACTIVITY\n- ACCELEROMETER\n- VIDEO_METADATA\n- ASSESSMENT_INFO\n- POSE\nAdditional LFP shift: 800[ms]\n&gt;&gt;&gt; dataset.LFP.ZERO_TWO_LEFT\nSignal(N: 113661, ROI: (800, 455400), SamplingRate: 250.0Hz)\n</code></pre>"},{"location":"reference/brainsight/types/signal/","title":"signal","text":""},{"location":"reference/brainsight/types/signal/#brainsight.types.signal.Signal","title":"<code>Signal(values: List[float], timestamps: List[float], sampling_rate: Optional[Union[float, int]] = None)</code>","text":"<p>A class for convenient handling of dataset's signals. Each signal object contains values and timestamps of the signal ensuring accurate calculations and plotting.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>List[float]</code> <p>List of signal values.</p> required <code>timestamps</code> <code>List[float]</code> <p>List of timestamps corresponding to the signal values.</p> required <code>sampling_rate</code> <code>float or int, or None</code> <p>Sampling rate of the signal [in Hz]. If <code>None</code>, the sampling rate will be inferred as from the median timestamp difference, by default <code>None</code>.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>values</code> <code>ndarray</code> <p>Numpy array containing signal values.</p> <code>timestamps</code> <code>ndarray</code> <p>Numpy array containing signal timestamps.</p> <code>ts</code> <code>ndarray</code> <p>Alias for <code>timestamps</code>.</p> <code>sampling_rate</code> <code>float</code> <p>Sampling rate of the signal.</p> <code>SamplingRate</code> <code>float</code> <p>Alias for <code>sampling_rate</code>.</p> <code>roi</code> <code>Tuple[int, int]</code> <p>Tuple indicating the first and last timestamp of the signal.</p> <code>ROI</code> <code>Tuple[int, int]</code> <p>Alias for <code>roi</code>.</p> <p>Methods:</p> Name Description <code>shift</code> <p>Temporally shifts the Signal's timestamps. Returns a new Signal instance.</p> <code>to_dict</code> <p>Converts the signal to a dictionary with serialisable typing.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p><code>values</code> and <code>timestamps</code> are of different length.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; signal = Signal(values=[0.2, 0.3, 0.1], timestamps=[1, 2, 3])\n&gt;&gt;&gt; signal\nSignal(N: 3, ROI: (1, 3), SamplingRate: 1000.0Hz)\n&gt;&gt;&gt; signal.values\narray([0.2, 0.3, 0.1])\n&gt;&gt;&gt; signal.timestamps\narray([1, 2, 3])\n&gt;&gt;&gt; signal.roi\n(1, 3)\n</code></pre>"},{"location":"reference/brainsight/types/signal/#brainsight.types.signal.Signal.shift","title":"<code>shift(shift_ms: int)</code>","text":"<p>Temporaly shifts the Signal by adding <code>shift_ms</code> to the Signal's timestamps. Returns a new Signal instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; signal = Signal(values=[0.2, 0.3, 0.1], timestamps=[1, 2, 3])\n&gt;&gt;&gt; signal\nSignal(N: 3, ROI: (1, 3), SamplingRate: 1000.0Hz)\n&gt;&gt;&gt; signal.shift(100)\nSignal(N: 3, ROI: (101, 103), SamplingRate: 1000.0Hz)\n&gt;&gt;&gt; signal.shift(-5)\nSignal(N: 3, ROI: (-4, -2), SamplingRate: 1000.0Hz)\n</code></pre>"},{"location":"reference/brainsight/types/signal/#brainsight.types.signal.Signal.to_dict","title":"<code>to_dict() -&gt; Dict[str, list]</code>","text":"<p>Converts the signal to a dictionary with serialisable typing.</p>"},{"location":"reference/brainsight/types/utils/","title":"utils","text":""}]}